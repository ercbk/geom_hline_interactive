?ggplot2::ggproto
?ggplot2::remove_missing
?ggplot2::StatIdentity
ggplot2::ggproto
ggiraph::GeomInteractiveSegment
?ggiraph::GeomInteractiveSegment
ggplot2::StatIdentity
ggplot2::PositionIdentity
library(tidyverse)
library(ggiraph)
war_combo_avg <- read_rds("data/18 - JAWS pg line chart table.rds")
#' @importFrom ggplot2 remove_missing
GeomInteractiveSegment <- ggproto("GeomSegment", Geom,
draw_panel = function(data, panel_scales, coord, arrow = NULL,
lineend = "butt", na.rm = FALSE) {
data <- remove_missing(data, na.rm = na.rm,
c("x", "y", "xend", "yend", "linetype", "size", "shape", "tooltip", "onclick", "data_id"),
name = "geom_segment_interactive")
if (nrow(data) < 1 || ncol(data) < 1 ) return(zeroGrob())
if (coord$is_linear()) {
coord <- coord$transform(data, panel_scales)
if( !is.null(coord$tooltip) && !is.character(coord$tooltip) )
coord$tooltip <- as.character(coord$tooltip)
if( !is.null(coord$onclick) && !is.character(coord$onclick) )
coord$onclick <- as.character(coord$onclick)
if( !is.null(coord$data_id) && !is.character(coord$data_id) )
coord$data_id <- as.character(coord$data_id)
return(interactive_segments_grob(coord$x, coord$y, coord$xend, coord$yend,
tooltip = coord$tooltip,
onclick = coord$onclick,
data_id = coord$data_id,
default.units = "native",
gp = gpar(
col = alpha(coord$colour, coord$alpha),
fill = alpha(coord$colour, coord$alpha),
lwd = coord$size * .pt,
lty = coord$linetype,
lineend = lineend
),
arrow = arrow
))
}
data$group <- 1:nrow(data)
starts <- subset(data, select = c(-xend, -yend))
ends <- subset(data, select = c(-x, -y))
names(ends)[names(ends) %in% "xend"] <- "x"
names(ends)[names(ends) %in% "yend"] <- "y"
pieces <- rbind(starts, ends)
pieces <- pieces[order(pieces$group),]
GeomPathInteractive$draw_panel(pieces, panel_scales, coord, arrow = arrow,
lineend = lineend)
},
required_aes = c("x", "y", "xend", "yend"),
default_aes = aes(colour = "black", size = 0.5, linetype = 1, alpha = NA,
tooltip = NULL, onclick = NULL, data_id = NULL),
draw_key = draw_key_path
)
geom_hline_interactive <- function(mapping = NULL, data = NULL,
...,
yintercept,
na.rm = FALSE,
show.legend = NA) {
# Act like an annotation
if (!missing(yintercept)) {
data <- data.frame(yintercept = yintercept)
mapping <- aes(yintercept = yintercept)
show.legend <- FALSE
}
layer(
data = data,
mapping = mapping,
stat = StatIdentity,
geom = GeomInteractiveHline,
position = PositionIdentity,
show.legend = show.legend,
inherit.aes = FALSE,
params = list(
na.rm = na.rm,
...
)
)
}
GeomInteractiveHline <- ggproto("GeomHline", Geom,
draw_panel = function(data, panel_scales, coord) {
ranges <- coord$range(panel_scales)
data$x    <- ranges$x[1]
data$xend <- ranges$x[2]
data$y    <- data$yintercept
data$yend <- data$yintercept
GeomInteractiveSegment$draw_panel(unique(data), panel_scales, coord)
},
default_aes = aes(colour = "black", size = 0.5, linetype = 1, alpha = NA),
required_aes = "yintercept",
draw_key = draw_key_path
)
war_line <- war_combo_avg %>%
filter(Name == "Johnny Bench")
line_filtered <- war_line %>%
filter(type == "WAR4")
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = mean(`Median WAR`)), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
# text = element_text(family = "Georgia"),
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
interactive_segments_grob
gridExtra::gpar
library(grid)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = mean(`Median WAR`)), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
# text = element_text(family = "Georgia"),
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
glimpse(war_line)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer"), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
# text = element_text(family = "Georgia"),
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = mean(`Median WAR`)), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
# text = element_text(family = "Georgia"),
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = `Median WAR`), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
# text = element_text(family = "Georgia"),
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
hof_bat <- read_rds("data/13 - HOF Batting.rds")
View(hof_bat)
a1 <- ggplot(data = hof_bat, aes(x = `wRC+`)) +
geom_density(fill = "#000000", alpha = 0.7) +
# scale_y_continuous(limits = c(0, max(bench_war$WAR)+5)) +
scale_x_continuous() +
theme(axis.text.y = element_blank())
a1
a1 <- ggplot(data = hof_bat, aes(x = `wRC+`)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = median(`wRC+`), linetype = "Typical HOFer"), color = alpha("#FFF", 0.5), size = 1.25)
a1 <- ggplot(data = hof_bat, aes(x = `wRC+`)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = median(`wRC+`), linetype = "Typical HOFer"), color = alpha("#FFFFFF", 0.5), size = 1.25)
a1 <- ggplot(data = hof_bat, aes(x = `wRC+`)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = median(`wRC+`), linetype = "Typical HOFer"), color = alpha("#FFFFFF", 0.5), size = 1.25) +
scale_x_continuous() +
theme(axis.text.y = element_blank())
a1
a1 <- ggplot(data = hof_bat, aes(x = `wRC+`)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(`wRC+`), color = alpha("#FFFFFF", 0.5), size = 1.25)) +
scale_x_continuous() +
theme(axis.text.y = element_blank())
a1
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR), color = "#FFFFFF")) +
scale_x_continuous() +
theme(axis.text.y = element_blank())
a1
geom_vline(aes(xintercept = mean(HR), color = #FFFFFF)) +
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR), color = "white"))
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR), color = "white")) +
scale_x_continuous() +
theme(axis.text.y = element_blank())
a1
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR))) +
scale_y_continuous()
a1
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR), color = "white")) +
scale_y_continuous()
a1
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline(aes(xintercept = mean(HR)), color = "white") +
scale_y_continuous()
a1
GeomInteractiveSegment <- ggproto("GeomSegment", Geom,
draw_panel = function(data, panel_scales, coord, arrow = NULL,
lineend = "butt", na.rm = FALSE) {
data <- remove_missing(data, na.rm = na.rm,
c("x", "y", "xend", "yend", "linetype", "size", "shape", "tooltip", "onclick", "data_id"),
name = "geom_segment_interactive")
if (nrow(data) < 1 || ncol(data) < 1 ) return(zeroGrob())
if (coord$is_linear()) {
coord <- coord$transform(data, panel_scales)
if( !is.null(coord$tooltip) && !is.character(coord$tooltip) )
coord$tooltip <- as.character(coord$tooltip)
if( !is.null(coord$onclick) && !is.character(coord$onclick) )
coord$onclick <- as.character(coord$onclick)
if( !is.null(coord$data_id) && !is.character(coord$data_id) )
coord$data_id <- as.character(coord$data_id)
return(interactive_segments_grob(coord$x, coord$y, coord$xend, coord$yend,
tooltip = coord$tooltip,
onclick = coord$onclick,
data_id = coord$data_id,
default.units = "native",
gp = gpar(
col = alpha(coord$colour, coord$alpha),
fill = alpha(coord$colour, coord$alpha),
lwd = coord$size * .pt,
lty = coord$linetype,
lineend = lineend
),
arrow = arrow
))
}
data$group <- 1:nrow(data)
starts <- subset(data, select = c(-xend, -yend))
ends <- subset(data, select = c(-x, -y))
names(ends)[names(ends) %in% "xend"] <- "x"
names(ends)[names(ends) %in% "yend"] <- "y"
pieces <- rbind(starts, ends)
pieces <- pieces[order(pieces$group),]
GeomPathInteractive$draw_panel(pieces, panel_scales, coord, arrow = arrow,
lineend = lineend)
},
required_aes = c("x", "y", "xend", "yend"),
default_aes = aes(colour = "black", size = 0.5, linetype = 1, alpha = NA,
tooltip = NULL, onclick = NULL, data_id = NULL),
draw_key = draw_key_path
)
geom_vline_interactive <- function(mapping = NULL, data = NULL,
...,
xintercept,
na.rm = FALSE,
show.legend = NA) {
# Act like an annotation
if (!missing(xintercept)) {
data <- data.frame(xintercept = xintercept)
mapping <- aes(xintercept = xintercept)
show.legend <- FALSE
}
layer(
data = data,
mapping = mapping,
stat = StatIdentity,
geom = GeomInteractiveVline,
position = PositionIdentity,
show.legend = show.legend,
inherit.aes = FALSE,
params = list(
na.rm = na.rm,
...
)
)
}
GeomInteractiveVline <- ggproto("GeomVline", Geom,
draw_panel = function(data, panel_scales, coord) {
ranges <- coord$range(panel_scales)
data$x    <- data$xintercept
data$xend <- data$xintercept
data$y    <- ranges$y[1]
data$yend <- ranges$y[2]
GeomInteractiveSegment$draw_panel(unique(data), panel_scales, coord)
},
default_aes = aes(colour = "black", size = 0.5, linetype = 1, alpha = NA),
required_aes = "xintercept",
draw_key = draw_key_vline
)
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), tooltip = mean(HR)), color = "white") +
scale_y_continuous()
ggiraph(ggobj = a1)
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), tooltip = round(mean(HR), 1)), color = "orange") +
scale_y_continuous()
ggiraph(ggobj = a1)
source('~/R/Projects/geom_hline_interactive/vline_experimental.R', echo=TRUE)
source('~/R/Projects/geom_hline_interactive/vline_experimental.R', echo=TRUE)
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), color = "orange"), tooltip = round(mean(HR), 1)) +
scale_y_continuous()
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), color = "orange"), tooltip = round(mean(HR), 1)) +
scale_y_continuous()
source('~/R/Projects/geom_hline_interactive/vline_experimental.R', echo=TRUE)
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), tooltip = round(mean(HR), 1)), color = "orange") +
scale_y_continuous()
ggiraph(ggobj = a1)
source('~/R/Projects/geom_hline_interactive/hline-experimental.R', echo=TRUE)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = `Median WAR`), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p)
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = `Median WAR`, data_id = `Median WAR`), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p, hover_css = "fill:orange;")
ggiraph(ggobj = p, hover_css = "cursor:pointer;fill:orange;stroke:orange;")
war_line$onclick <- sprintf("window.open(\"%s%s%s\")",
"https://www.baseball-reference.com/players/b/", bbref_id, ".shtml")
war_line$onclick <- sprintf("window.open(\"%s%s%s\")",
"https://www.baseball-reference.com/players/b/", war_line$bbref_id, ".shtml")
war_line$onclick <- sprintf("window.open(\"%s%s%s\")",
"https://www.baseball-reference.com/players/b/", war_line$bbref_id, ".shtml")
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR, onclick = onclick), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = `Median WAR`, data_id = `Median WAR`), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p, hover_css = "cursor:pointer;fill:orange;stroke:orange;")
p <- ggplot(data = war_line) +
geom_point_interactive(aes(x = yearId, y = WAR, group = type, tooltip = WAR), color = alpha("#000000", 0.5)) +
geom_point_interactive(data = line_filtered, aes(x = yearId, y = WAR, color = type, tooltip = WAR), size = 2.5, shape = 17) +
geom_line(aes(x = yearId, y = WAR)) +
# all the Median WAR is the same, taking mean is just me hacking to get a value instead of a vector for the y-intercept
geom_hline_interactive(aes(yintercept = mean(`Median WAR`), linetype = "Typical HOFer", tooltip = `Median WAR`, data_id = `Median WAR`, onclick = onclick), color = alpha("#C6011F", 0.5), size = 1.25) +
scale_linetype_manual(values = 2, guide = guide_legend(override.aes = list(color = "#C6011F"))) +
scale_y_continuous(limits = c(min(war_line$WAR)-5, max(war_line$WAR)+5)) +
labs(title = "WAR") +
theme_minimal() +
theme(axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.justification = c(0,1),
legend.position = c(.1, 1),
legend.box = "horizontal",
legend.background = element_blank(),
legend.direction = "horizontal",
plot.title = element_text(size = 20, margin = margin(b = 10))
)
ggiraph(ggobj = p, hover_css = "cursor:pointer;fill:orange;stroke:orange;")
source('~/R/Projects/geom_hline_interactive/vline_experimental.R', echo=TRUE)
rm(hof_bat)
hof_bat <- read_rds("data/13 - HOF Batting wIds.rds")
string1 <- str_extract_all(hof_bat$bbref_playerId, "^[a-z]")
string2 <- paste0(string1, "/")
thing <- hof_bat %>%
add_column(b_prefix = string2) %>%
select(b_prefix, everything())
hof_bat$onclick <- sprintf("window.open(\"%s%s%s%s\")",
"https://www.baseball-reference.com/players/", thing$b_prefix, thing$bbref_id, ".shtml")
hof_bat$onclick <- sprintf("window.open(\"%s%s%s%s\")",
"https://www.baseball-reference.com/players/", thing$b_prefix, thing$bbref_playerId, ".shtml")
a1 <- ggplot(data = hof_bat, aes(x = HR)) +
geom_density(fill = "#000000", alpha = 0.7) +
geom_vline_interactive(aes(xintercept = mean(HR), tooltip = round(mean(HR), 1), data_id = round(mean(HR), 1), onclick = onclick), color = "orange") +
scale_y_continuous()
ggiraph(ggobj = a1, hover_css = "cursor:pointer;fill:blue;stroke:blue;")
